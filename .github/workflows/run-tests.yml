name: Run tests
# Events configuration
on:
  # Execute it on pushing to next branches
  push:
    branches:
      - main
      - release
  # Execute it on opening any pull request
  pull_request:
jobs:
  # Get branch info
  branch-info:
    runs-on: ubuntu-latest
    steps:
      # Get current branch name
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v7.0.3
      # Get base branch name to compare with. Base branch on a PR, "main" branch on pushing.
      - name: Get base branch name
        id: get-base-branch-name
        run: |
          if [[ "${{github.event.pull_request.base.ref}}" != "" ]]; then
            echo "branch=${{github.event.pull_request.base.ref}}" >> $GITHUB_OUTPUT
            echo "running on a pull request" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "base branch: _${{github.event.pull_request.base.ref}}_" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "current branch: _${{steps.branch-name.outputs.current_branch}}_" >> $GITHUB_STEP_SUMMARY
          else
            echo "branch=main" >> $GITHUB_OUTPUT
            echo "running on a commit to main" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "base branch: _main_" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "current branch: _${{steps.branch-name.outputs.current_branch}}_" >> $GITHUB_STEP_SUMMARY
          fi
    outputs:
      # Export the branch names as output to be able to use it in other jobs
      base-branch-name: ${{ steps.get-base-branch-name.outputs.branch }}
      branch-name: ${{ steps.branch-name.outputs.current_branch }}

  get-affected:
    permissions:
      contents: read
      actions: read
    needs: [branch-info]
    runs-on: ubuntu-latest
    steps:
      # Check out the repository
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Configure Nx to be able to detect changes between branches when we are in a PR
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3
        with:
          main-branch-name: ${{needs.branch-info.outputs.base-branch-name}}
      # Install Pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.12
      # Install Node.js
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.17.0'
          cache: 'pnpm'
      # Install workspace dependencies
      - name: Install dependencies
        run: pnpm install
      - name: Get affected
        id: get-projects-arrays
        # When not in a PR and the current branch is main, pass --all flag. Otherwise pass the base branch
        run: |
          if [[ "${{github.event.pull_request.base.ref}}" == "" && "${{needs.branch-info.outputs.branch-name}}" == "main" ]]; then
            echo "test-unit=$(node tools/print-affected-array.js test --all)" >> $GITHUB_OUTPUT
            echo "test-e2e=$(node tools/print-affected-array.js e2e --all)" >> $GITHUB_OUTPUT
            echo "unit tests will run on projects:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '`'"$(node tools/print-affected-array.js test --all)"'`' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "e2e tests will run on projects:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '`'"$(node tools/print-affected-array.js e2e --all)"'`' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "test-unit=$(node tools/print-affected-array.js test origin/${{needs.branch-info.outputs.base-branch-name}})" >> $GITHUB_OUTPUT
            echo "test-e2e=$(node tools/print-affected-array.js e2e origin/${{needs.branch-info.outputs.base-branch-name}})" >> $GITHUB_OUTPUT
            echo "unit tests will run on projects:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '`'"$(node tools/print-affected-array.js test origin/${{needs.branch-info.outputs.base-branch-name}})"'`' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "e2e tests will run on projects:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '`'"$(node tools/print-affected-array.js e2e origin/${{needs.branch-info.outputs.base-branch-name}})"'`' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
    outputs:
      test-unit: ${{ steps.get-projects-arrays.outputs.test-unit }}
      test-e2e: ${{ steps.get-projects-arrays.outputs.test-e2e }}

  test-unit:
    name: unit-tests
    runs-on: ubuntu-latest
    needs: [get-affected]
    # Skip the job if there are not affected projects containing unit tests
    if: ${{ fromJson(needs.get-affected.outputs.test-unit)[0] }}
    strategy:
      # Run in parallel
      max-parallel: 4
      # One job for each different project and node version
      matrix:
        node: ['18.17.0', '20.5.0']
        projectName: ${{fromJson(needs.get-affected.outputs.test-unit)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      # Checkout and setup environment
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.12
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Unit Tests
        run: |
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          pnpm nx test ${{ matrix.projectName }} &>> $GITHUB_STEP_SUMMARY && EXIT_CODE=$? || EXIT_CODE=$?
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          exit $EXIT_CODE

  test-e2e:
    name: e2e-tests
    runs-on: ubuntu-latest
    needs: [get-affected]
    # Skip the job if there are not affected projects containing unit tests
    if: ${{ fromJson(needs.get-affected.outputs.test-e2e)[0] }}
    strategy:
      # Run in parallel
      max-parallel: 4
      # One job for each different project and node version
      matrix:
        node: ['18.17.0', '20.5.0']
        projectName: ${{fromJson(needs.get-affected.outputs.test-e2e)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.12
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      # Run test:e2e script in the affected project
      - name: E2E Tests
        run: |
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          pnpm nx e2e ${{ matrix.projectName }} &>> $GITHUB_STEP_SUMMARY && EXIT_CODE=$? || EXIT_CODE=$?
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          exit $EXIT_CODE

  test-e2e-windows:
    name: windows-e2e-tests
    runs-on: windows-2019
    needs: [get-affected]
    if: ${{ fromJson(needs.get-affected.outputs.test-e2e)[0] }}
    strategy:
      max-parallel: 2
      matrix:
        node: ['18.17.0', '20.5.0']
        projectName: ${{fromJson(needs.get-affected.outputs.test-e2e)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.12
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Test E2E
        run: |
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          pnpm nx e2e ${{ matrix.projectName }} &>> $GITHUB_STEP_SUMMARY && EXIT_CODE=$? || EXIT_CODE=$?
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          exit $EXIT_CODE

  result:
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e, test-e2e-windows]
    if: ${{ ! cancelled() }} && ${{ ! failure() }}
    steps:
      - name: Trace
        run: |
          echo " - unit tests: ${{needs.test-unit.result}}" >> $GITHUB_STEP_SUMMARY
          echo " - e2e tests: ${{needs.test-e2e.result}}" >> $GITHUB_STEP_SUMMARY
          echo " - windows e2e tests: ${{needs.test-e2e-windows.result}}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All jobs finished" >> $GITHUB_STEP_SUMMARY
